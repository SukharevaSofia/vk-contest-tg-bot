package main

import (
	"encoding/json"
	"time"
)

type TelegramRequests struct {
	Ok     bool `json:"ok"`
	Result []struct {
		UpdateId int `json:"update_id"`
		Message  struct {
			MessageId int `json:"message_id"`
			From      struct {
				Id           int    `json:"id"`
				IsBot        bool   `json:"is_bot"`
				FirstName    string `json:"first_name"`
				Username     string `json:"username"`
				LanguageCode string `json:"language_code"`
			} `json:"from"`
			Chat struct {
				Id        int    `json:"id"`
				FirstName string `json:"first_name"`
				Username  string `json:"username"`
				Type      string `json:"type"`
			} `json:"chat"`
			Date     int    `json:"date"`
			Text     string `json:"text"`
			Entities []struct {
				Offset int    `json:"offset"`
				Length int    `json:"length"`
				Type   string `json:"type"`
			} `json:"entities,omitempty"`
		} `json:"message"`
	} `json:"result"`
}

const (
	TEXT_BOT_DESCRIPTION string = "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
	NO_SUCH_COMMAND             = "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç :("
	MOOD_CHECK                  = "–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ?"
	INFO_SAVED                  = "–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã."
	NEW_ENTRY                   = "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å"
	SHOW_ENTRIES                = "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏"
	DEV_INF                     = "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø—Ä–æ–µ–∫—Ç—É!" +
		"\nGithub: https://github.com/SukharevaSofia" +
		"\nTelegram: @Topinamburka" +
		"\nMail: work@sssofya.ru"
	ABOUT_DEV    = "–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ"
	COMMAND_LIST = "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
	NO_DATA      = "–í —Ç–∞–±–ª–∏—Ü–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö!"
	DATABASE_URL = "DATABASE_URL"
	HELP         = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
		"\n`–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å` ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π" +
		"\n`–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏` ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Ä–∞–Ω–µ–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –≤ –¥–Ω–µ–≤–Ω–∏–∫ –¥–∞–Ω–Ω—ã–µ" +
		"\n`–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ` ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" +
		"\n`–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥` ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
)

const (
	HAPPY  string = "–û—Ç–ª–∏—á–Ω–æ üòÑ"
	GOOD          = "–•–æ—Ä–æ—à–æ üòå"
	MEH           = "–¢–∞–∫ —Å–µ–±–µ üòê"
	UNSURE        = "–ù–µ —É–≤–µ—Ä–µ–Ω(–∞) üßê"
	SAD           = "–ì—Ä—É—Å—Ç–∏–Ω–∫–∞ üòî"
	BIGSAD        = "–ë–æ–ª—å—à–∞—è –≥—Ä—É—Å—Ç–∏–Ω–∫–∞ üò≠"
	DEAD          = "–ø–æ—Ç–∏—Ö–æ–Ω—å–∫—É üíÄ"
	CRAZY         = "—Ö–∏—Ö–∏—Ö–∞—Ö–∞ ü§™"
)

func isMood(s string) bool {
	if s == HAPPY || s == GOOD || s == MEH || s == UNSURE || s == SAD || s == BIGSAD || s == DEAD || s == CRAZY {
		return true
	}
	return false
}

func menuKboard() string {
	var keyboard = NewReplyKeyboard(
		NewKeyboardButtonRow(
			NewKeyboardButton(NEW_ENTRY),
			NewKeyboardButton(SHOW_ENTRIES),
		),
		NewKeyboardButtonRow(
			NewKeyboardButton(ABOUT_DEV),
			NewKeyboardButton(COMMAND_LIST),
		),
	)
	kboard, _ := json.Marshal(keyboard)
	return string(kboard)
}

func moodKboard() string {
	var keyboard = NewReplyKeyboard(
		NewKeyboardButtonRow(
			NewKeyboardButton(HAPPY),
			NewKeyboardButton(GOOD),
		),
		NewKeyboardButtonRow(
			NewKeyboardButton(MEH),
			NewKeyboardButton(UNSURE),
		),
		NewKeyboardButtonRow(
			NewKeyboardButton(SAD),
			NewKeyboardButton(BIGSAD),
		),
		NewKeyboardButtonRow(
			NewKeyboardButton(CRAZY),
			NewKeyboardButton(DEAD),
		),
	)

	kboard, _ := json.Marshal(keyboard)
	return string(kboard)
}

type dateMoodPair struct {
	date time.Time
	mood string
}

// Source of the keyboard structs and their functions https://github.com/go-telegram-bot-api/

func NewReplyKeyboard(rows ...[]KeyboardButton) ReplyKeyboardMarkup {
	var keyboard [][]KeyboardButton
	keyboard = append(keyboard, rows...)
	return ReplyKeyboardMarkup{
		ResizeKeyboard: true,
		Keyboard:       keyboard,
	}
}

type KeyboardButton struct {
	Text            string                  `json:"text"`
	RequestContact  bool                    `json:"request_contact,omitempty"`
	RequestLocation bool                    `json:"request_location,omitempty"`
	RequestPoll     *KeyboardButtonPollType `json:"request_poll,omitempty"`
}

type KeyboardButtonPollType struct {
	Type string `json:"type"`
}

type ReplyKeyboardMarkup struct {
	Keyboard              [][]KeyboardButton `json:"keyboard"`
	ResizeKeyboard        bool               `json:"resize_keyboard,omitempty"`
	OneTimeKeyboard       bool               `json:"one_time_keyboard,omitempty"`
	InputFieldPlaceholder string             `json:"input_field_placeholder,omitempty"`
	Selective             bool               `json:"selective,omitempty"`
}

func NewKeyboardButtonRow(buttons ...KeyboardButton) []KeyboardButton {
	var row []KeyboardButton
	row = append(row, buttons...)
	return row
}

func NewKeyboardButton(text string) KeyboardButton {
	return KeyboardButton{
		Text: text,
	}
}
